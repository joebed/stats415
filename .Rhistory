svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, tune.out$performances$error, log = "x", xlab = "Cost", ylab="Error")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
help("svm")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(e1071)
crabs = MASS::crabs
set.seed(6789)
train.bm = sample(50, 40)
train.fm = sample(50, 40) + 50
train.om = sample(50, 40) + 100
train.of = sample(50, 40) + 150
train = c(train.bm, train.fm, train.om, train.of)
test = seq(200)[-train]
crabs = crabs[,-c(2,3)]
costs = seq(10^seq(-4,2))
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "linear", ranges = list(cost = c(.0001, .001, .01, .1, 1, 10, 100)))
train_errors = list()
test_errors = list()
for (i in costs){
svmfit = svm(
sp ~ .,
data = crabs[train,],
kernel = "linear",
scale = FALSE,
cost = i
)
svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, train_errors, log = "x", xlab = "Cost", ylab="Error")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
plot(crabs$FL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$CL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$RW, crabs$BD, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "linear", ranges = list(cost = c(.0001, .001, .01, .1, 1, 10, 100)))
train_errors = list()
test_errors = list()
for (i in costs){
svmfit = svm(
sp ~ .,
data = crabs[train,],
kernel = "linear",
scale = FALSE,
cost = i
)
svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, train_errors, log = "x", xlab = "Cost", ylab="Error")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
plot(crabs$FL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$CL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$RW, crabs$BD, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "linear", ranges = list(cost = c(.0001, .001, .01, .1, 1, 10, 100)))
train_errors = list()
test_errors = list()
for (i in costs){
svmfit = svm(
sp ~ .,
data = crabs[train,],
kernel = "linear",
scale = FALSE,
cost = i
)
svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, train_errors, log = "x", xlab = "Cost", ylab="Error", main="Errors")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
plot(crabs$FL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$CL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$RW, crabs$BD, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
costs
library(MASS)
library(e1071)
crabs = MASS::crabs
set.seed(6789)
train.bm = sample(50, 40)
train.fm = sample(50, 40) + 50
train.om = sample(50, 40) + 100
train.of = sample(50, 40) + 150
train = c(train.bm, train.fm, train.om, train.of)
test = seq(200)[-train]
crabs = crabs[,-c(2,3)]
costs = 10^seq(-4,2)
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "linear", ranges = list(cost = c(.0001, .001, .01, .1, 1, 10, 100)))
train_errors = list()
test_errors = list()
for (i in costs){
svmfit = svm(
sp ~ .,
data = crabs[train,],
kernel = "linear",
scale = FALSE,
cost = i
)
svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, train_errors, log = "x", xlab = "Cost", ylab="Error", main="Errors")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
plot(crabs$FL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$CL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$RW, crabs$BD, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "radial", ranges = list(cost = costs, gamma = c(.01, .1,.5,1,2,3,4,8)))
gamgam = tune.out$best.parameters$gamma
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "radial", ranges = list(cost = costs), gamma = gamgam)
train_errors = list()
test_errors = list()
for (i in costs){
svmfit = svm(
sp ~ .,
data = crabs[train,],
kernel = "radial",
gamma = gamgam,
scale = FALSE,
cost = i
)
svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, tune.out$performances$error, log = "x", xlab = "Cost", ylab="Error")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
View(crabs)
help(runif)
knitr::opts_chunk$set(echo = TRUE)
#Generate data
set.seed(123)
randoms = runif(100)
rm train
rm(train)
randoms
#Generate data
set.seed(123)
randoms = runif(100)
help(dinversegamma)
help(dinvgamma)
help(invgamma)
help(gamma)
help(dgamma)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
help(poisson)
help(dpoisson)
help(dpois)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
ex = average(vals)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
ex = avg(vals)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
ex = mean(vals)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
ex = mean(mean(vals))
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
data = df(vals)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
View(vals)
help(df)
help("data.frame")
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
dat = data.frame()
#Generate data
set.seed(123)
lambdas = list(rgamma(100, shape = 2, scale = 5))
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
rm ex
rm(ex)
#Generate data
set.seed(123)
lambdas = list(rgamma(100, shape = 2, scale = 5))
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
dat = data.frame()
dat$lambda =
rm(list=ls())
rm("train")
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
plot(hc.complete)
library(ISLR2)
head(USArrests)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete)
library(ISLR2)
head(USArrests)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete, xlab="", ylab="bruh")
install.packages("cluster")
sil.complete = (cutree(hc.complete, 5), dist = dist(x))
sil.complete = (cutree(hc.complete, 5) dist = dist(x))
head(cluster)
library(cluster)
sil.complete = silhoutte(cutree(hc.complete, 5) dist = dist(x))
library(cluster)
sil.complete = silhoutte(cutree(hc.complete, 5), dist = dist(x))
library(cluster)
sil.complete = silhoutte(cutree(hc.complete, 5), dist = dist(x))
library(cluster)
sil.complete = silhouette(cutree(hc.complete, 5), dist = dist(x))
library(cluster)
sil.complete = silhouette(cutree(hc.complete, 5), dist = dist(USArrests))
library(cluster)
sil.complete = silhouette(cutree(hc.complete, 5), dist = dist(USArrests))
plot(sil.complete, main="Complete")
library(cluster)
tree_thats_been_cut = cutree(hc.complete, 5)
sil.complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Complete")
tree_thats_been_cut
library(cluster)
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
sil.complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Complete")
hc.complete = hclust(dist(USArrests), method = "single")
plot(hc.complete, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
sil.complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Single")
km.out5 = kmeans(USArrests, 5, nstart = 40)
library(ISLR2)
head(USArrests)
set.seed(864)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete, xlab="", ylab="bruh")
library(cluster)
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
sil.complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Complete")
hc.complete = hclust(dist(USArrests), method = "single")
plot(hc.complete, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
sil.complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Single")
km.out5 = kmeans(USArrests, 5, nstart = 40)
km.out5
km.out5$cluster
km.out5$tot.withinss
km.out5$tot.withinss
library(ISLR2)
head(USArrests)
set.seed(864)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete, xlab="", ylab="bruh")
library(cluster)
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
sil.complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Complete")
hc.complete = hclust(dist(USArrests), method = "single")
plot(hc.complete, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Single")
library(ISLR2)
head(USArrests)
set.seed(864)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete, xlab="", ylab="bruh")
library(cluster)
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
sil.complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Complete")
hc.complete = hclust(dist(USArrests), method = "single")
plot(hc.complete, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Single")
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5, )
help(silhouettes)
help(silhouette)
km.out5$withinss
km.out5$ifault
km.out5$centers
km.out5$cluster
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5, dmatrix = km.out5$cluster)
hc.complete = hclust(dist(USArrests), method = "single")
plot(hc.complete, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Single")
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5$cluster)
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5$cluster)
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5$cluster, dist=dist(USArrests))
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5$cluster, dist=dist(USArrests))
plot(sil.kmeans)
hc.complete = hclust(dist(USArrests), method = "single")
plot(hc.complete, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(single, main="Single")
head(USArrests)
USArrests[, c(2,3,4)]
USArrests = scale(USArrests)
head(USArrests)
hc.single = hclust(dist(USArrests), method = "single")
plot(hc.single, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(single, main="Single")
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.single, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(single, main="Complete and Scaled")
USArrests = scale(USArrests)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(single, main="Complete and Scaled")
USArrests = scale(USArrests)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(complete, main="Complete and Scaled")
hc.single = hclust(dist(USArrests), method = "single")
plot(hc.single, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.single, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(single, main="Single and Scaled")
library(ISLR2)
head(USArrests)
set.seed(864)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete, xlab="", ylab="bruh")
library(cluster)
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
sil.complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(sil.complete, main="Complete")
hc.single = hclust(dist(USArrests), method = "single")
plot(hc.single, xlab="", ylab="bruh")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
single = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(single, main="Single")
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5$cluster, dist=dist(USArrests))
plot(sil.kmeans)
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5$cluster, dist=dist(USArrests))
plot(sil.kmeans, main = "K Means")
USArrests = scale(USArrests)
hc.complete = hclust(dist(USArrests), method = "complete")
plot(hc.complete, xlab="", ylab="bruh", main="Complete Dendrogram")
tree_thats_been_cut = cutree(hc.complete, 5)
tree_thats_been_cut
complete = silhouette(tree_thats_been_cut, dist = dist(USArrests))
plot(complete, main="Complete and Scaled")
km.out5 = kmeans(USArrests, 5, nstart = 51)
km.out5$cluster
sil.kmeans = silhouette(km.out5$cluster, dist=dist(USArrests))
plot(sil.kmeans, main = "K Means")
setwd("junior/stats415/final_project")
rm(list=ls())
train_data = read.csv(train_data)
train_data = read.csv("train_data.csv")
test_data = read.csv("test_data.csv")
rm(list=ls())
ls
# Set up workspace for the final project
rm(list=ls())
# Set working directory. Just hit enter if you're already on it
wd = readline(prompt="What is your final project directory?")
train_data = read.csv("train_data.csv")
test_data = read.csv("test_data.csv")
wd = readline(prompt="What is your final project directory?")
rm(list=ls())
# Set working directory. Just hit enter if you're already on it
wd = readline(prompt="What is your final project directory?")
train_data = read.csv("train_data.csv")
test_data = read.csv("test_data.csv")
rm(wd)
source("~/junior/stats415/final_project/set_workspace.R", echo=TRUE)
source("~/junior/stats415/final_project/set_workspace.R", echo=TRUE)
setwd("../../")
getwd()
source("~/junior/stats415/final_project/set_workspace.R", echo=TRUE)
help(regsubsets)
??regsubsets
library(leaps)
help("regsubsets")
source("~/.active-rstudio-document", echo=TRUE)
help("regsubsets")
regfit.full = regsubsets(y ~ ., data = train_data)
regfit.full = regsubsets(y ~ ., data = train_data, method = "forward")
regfit.full = regsubsets(y ~ ., data = train_data, method = "forward")
source("~/.active-rstudio-document", echo=TRUE)
summary(pcr.fit)
validationplot(pcr.fit, val.type = "MSEP")
