costs
library(MASS)
library(e1071)
crabs = MASS::crabs
set.seed(6789)
train.bm = sample(50, 40)
train.fm = sample(50, 40) + 50
train.om = sample(50, 40) + 100
train.of = sample(50, 40) + 150
train = c(train.bm, train.fm, train.om, train.of)
test = seq(200)[-train]
crabs = crabs[,-c(2,3)]
costs = 10^seq(-4,2)
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "linear", ranges = list(cost = c(.0001, .001, .01, .1, 1, 10, 100)))
train_errors = list()
test_errors = list()
for (i in costs){
svmfit = svm(
sp ~ .,
data = crabs[train,],
kernel = "linear",
scale = FALSE,
cost = i
)
svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, train_errors, log = "x", xlab = "Cost", ylab="Error", main="Errors")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
plot(crabs$FL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$CL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$RW, crabs$BD, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "radial", ranges = list(cost = costs, gamma = c(.01, .1,.5,1,2,3,4,8)))
gamgam = tune.out$best.parameters$gamma
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "radial", ranges = list(cost = costs), gamma = gamgam)
train_errors = list()
test_errors = list()
for (i in costs){
svmfit = svm(
sp ~ .,
data = crabs[train,],
kernel = "radial",
gamma = gamgam,
scale = FALSE,
cost = i
)
svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, tune.out$performances$error, log = "x", xlab = "Cost", ylab="Error")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
View(crabs)
help(runif)
knitr::opts_chunk$set(echo = TRUE)
#Generate data
set.seed(123)
randoms = runif(100)
rm train
rm(train)
randoms
#Generate data
set.seed(123)
randoms = runif(100)
help(dinversegamma)
help(dinvgamma)
help(invgamma)
help(gamma)
help(dgamma)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
help(poisson)
help(dpoisson)
help(dpois)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
ex = average(vals)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
ex = avg(vals)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
ex = mean(vals)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
ex = mean(mean(vals))
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, rpois(10, lambda = lambdas[i]))
data = df(vals)
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
View(vals)
help(df)
help("data.frame")
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
dat = data.frame()
#Generate data
set.seed(123)
lambdas = list(rgamma(100, shape = 2, scale = 5))
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
rm ex
rm(ex)
#Generate data
set.seed(123)
lambdas = list(rgamma(100, shape = 2, scale = 5))
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
#Generate data
set.seed(123)
lambdas = rgamma(100, shape = 2, scale = 5)
vals = list()
for (i in seq(100))
vals = append(vals, list(rpois(10, lambda = lambdas[i])))
dat = data.frame()
dat$lambda =
source("~/junior/stats415/final_project/set_up_data.R", echo=TRUE)
source("~/junior/stats415/final_project/set_up_data.R", echo=TRUE)
source("~/junior/stats415/final_project/set_up_data.R", echo=TRUE)
rm(list=ls())
wd()
wd
pwd()
cwd()
getwd()
setwd("C:/Users/bedna/Documents/junior/stats415/final_project")
source("~/junior/stats415/final_project/set_up_data.R", echo=TRUE)
rm(list= ls())
# In order to use this, use setwd({final_project_directory})
# getwd() gets your current working directory if you're unsure where you are at
# Data of all years has these names
files = c("/TCHOL.XPT", "/SMQ.XPT", "/DR1TOT.XPT", "/DEMO.XPT", "/BPX.XPT", "/BMX.XPT")
library(haven)
library(dplyr)
years_data = list()
# Iterate through all years
for(i in seq(1, 5)){
# Set year
year = 2 * i + 2007
# Set string of directory, make sure to setwd to your final project directory
dir = paste("data/", year, sep="")
year_data = data.frame()
# Iterate through all files and left join
for(j in seq(1,6)){
d = paste(dir, files[j], sep="")
val = read_xpt(d)
if(j == 1){
year_data = val
}
else{
year_data = merge(year_data, val, all.x = TRUE, by = "SEQN")
}
}
if(i == 1){
years_data = year_data
}
else{
years_data = bind_rows(years_data, year_data)
}
}
# Remove any column where there is an NA
years_data = years_data[, colSums(is.na(years_data)) == 0]
# Set train and test data
train_data = read.csv("data/train.csv")
test_data = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data = merge(test_data, years_data, all.x = TRUE, by="SEQN")
# Clean workspace
rm(c("year_data", "years_data", "val", "d", "dir", "i", "j", "year"))
# In order to use this, use setwd({final_project_directory})
# getwd() gets your current working directory if you're unsure where you are at
# Data of all years has these names
files = c("/TCHOL.XPT", "/SMQ.XPT", "/DR1TOT.XPT", "/DEMO.XPT", "/BPX.XPT", "/BMX.XPT")
library(haven)
library(dplyr)
years_data = list()
# Iterate through all years
for(i in seq(1, 5)){
# Set year
year = 2 * i + 2007
# Set string of directory, make sure to setwd to your final project directory
dir = paste("data/", year, sep="")
year_data = data.frame()
# Iterate through all files and left join
for(j in seq(1,6)){
d = paste(dir, files[j], sep="")
val = read_xpt(d)
if(j == 1){
year_data = val
}
else{
year_data = merge(year_data, val, all.x = TRUE, by = "SEQN")
}
}
if(i == 1){
years_data = year_data
}
else{
years_data = bind_rows(years_data, year_data)
}
}
# Remove any column where there is an NA
years_data = years_data[, colSums(is.na(years_data)) == 0]
# Set train and test data
train_data = read.csv("data/train.csv")
test_data = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data = merge(test_data, years_data, all.x = TRUE, by="SEQN")
# In order to use this, use setwd({final_project_directory})
# getwd() gets your current working directory if you're unsure where you are at
# Data of all years has these names
files = c("/TCHOL.XPT", "/SMQ.XPT", "/DR1TOT.XPT", "/DEMO.XPT", "/BPX.XPT", "/BMX.XPT")
library(haven)
library(dplyr)
years_data = list()
# Iterate through all years
for(i in seq(1, 5)){
# Set year
year = 2 * i + 2007
# Set string of directory, make sure to setwd to your final project directory
dir = paste("data/", year, sep="")
year_data = data.frame()
# Iterate through all files and left join
for(j in seq(1,6)){
d = paste(dir, files[j], sep="")
val = read_xpt(d)
if(j == 1){
year_data = val
}
else{
year_data = merge(year_data, val, all.x = TRUE, by = "SEQN")
}
}
if(i == 1){
years_data = year_data
}
else{
years_data = bind_rows(years_data, year_data)
}
}
# Remove any column where there is an NA
#years_data = years_data[, colSums(is.na(years_data)) == 0]
# Set train and test data
train_data = read.csv("data/train.csv")
test_data = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data = merge(test_data, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data[, colSums(is.na(test_data)) == 0]
test_data$y
re at
# Data of all years has these names
files = c("/TCHOL.XPT", "/SMQ.XPT", "/DR1TOT.XPT", "/DEMO.XPT", "/BPX.XPT", "/BMX.XPT")
library(haven)
library(dplyr)
years_data = list()
# Iterate through all years
for(i in seq(1, 5)){
# Set year
year = 2 * i + 2007
# Set string of directory, make sure to setwd to your final project directory
dir = paste("data/", year, sep="")
year_data = data.frame()
# Iterate through all files and left join
for(j in seq(1,6)){
d = paste(dir, files[j], sep="")
val = read_xpt(d)
if(j == 1){
year_data = val
}
else{
year_data = merge(year_data, val, all.x = TRUE, by = "SEQN")
}
}
if(i == 1){
years_data = year_data
}
else{
years_data = bind_rows(years_data, year_data)
}
}
# Remove any column where there is an NA
#years_data = years_data[, colSums(is.na(years_data)) == 0]
# Set train and test data
train_data = read.csv("data/train.csv")
test_data = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data1 = merge(test_data, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data1[, colSums(is.na(test_data1)) == 0]
test_data = merge(test_data, test_data1, by="SEQN", all.x = TRUE)
sure where you are at
# Data of all years has these names
files = c("/TCHOL.XPT", "/SMQ.XPT", "/DR1TOT.XPT", "/DEMO.XPT", "/BPX.XPT", "/BMX.XPT")
library(haven)
library(dplyr)
years_data = list()
# Iterate through all years
for(i in seq(1, 5)){
# Set year
year = 2 * i + 2007
# Set string of directory, make sure to setwd to your final project directory
dir = paste("data/", year, sep="")
year_data = data.frame()
# Iterate through all files and left join
for(j in seq(1,6)){
d = paste(dir, files[j], sep="")
val = read_xpt(d)
if(j == 1){
year_data = val
}
else{
year_data = merge(year_data, val, all.x = TRUE, by = "SEQN")
}
}
if(i == 1){
years_data = year_data
}
else{
years_data = bind_rows(years_data, year_data)
}
}
# Remove any column where there is an NA
#years_data = years_data[, colSums(is.na(years_data)) == 0]
# Set train and test data
train_data = read.csv("data/train.csv")
test_data = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data1 = merge(test_data, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data1[, colSums(is.na(test_data1)) == 0]
test_data = merge(test_data, test_data1, by="SEQN", all.x = TRUE)
train_data = read.csv("data/train.csv")
test_data1 = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data1 = merge(test_data1, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data1[, colSums(is.na(test_data1)) == 0]
test_data2 = merge(test_data, test_data1, by = "SEQN")
head(test_data1)
# Set train and test data
train_data = read.csv("data/train.csv")
test_data1 = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data2 = merge(test_data1, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data2[, colSums(is.na(test_data2)) == 0]
test_dat
t data
train_data = read.csv("data/train.csv")
test_data1 = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data2 = merge(test_data1, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data2[, colSums(is.na(test_data2)) == 0]
train_data$y
# Set train and test data
train_data = read.csv("data/train.csv")
test_data1 = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data = merge(test_data, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data[, colSums(is.na(test_data)) == 0]
}
# Remove any column where there is an NA
#years_data = years_data[, colSums(is.na(years_data)) == 0]
# Set train and test data
train_data = read.csv("data/train.csv")
test_data = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data = merge(test_data, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data[, colSums(is.na(test_data)) == 0]
rm(list = c(d, dir))
rm(list = c("d", "dir"))
rm(listls())
rm(list=ls())
# Data of all years has these names
files = c("/TCHOL.XPT", "/SMQ.XPT", "/DR1TOT.XPT", "/DEMO.XPT", "/BPX.XPT", "/BMX.XPT")
library(haven)
library(dplyr)
years_data = list()
# Iterate through all years
for(i in seq(1, 5)){
# Set year
year = 2 * i + 2007
# Set string of directory, make sure to setwd to your final project directory
dir = paste("data/", year, sep="")
year_data = data.frame()
# Iterate through all files and left join
for(j in seq(1,6)){
d = paste(dir, files[j], sep="")
val = read_xpt(d)
if(j == 1){
year_data = val
}
else{
year_data = merge(year_data, val, all.x = TRUE, by = "SEQN")
}
}
if(i == 1){
years_data = year_data
}
else{
years_data = bind_rows(years_data, year_data)
}
}
# Remove any column where there is an NA
#years_data = years_data[, colSums(is.na(years_data)) == 0]
# Set train and test data
train_data = read.csv("data/train.csv")
test_data = read.csv("data/test.csv")
train_data = merge(train_data, years_data, all.x = TRUE, by="SEQN")
test_data = merge(test_data, years_data, all.x = TRUE, by="SEQN")
train_data = train_data[, colSums(is.na(train_data)) == 0]
test_data = test_data[, colSums(is.na(test_data)) == 0]
# Clean data
rm(list = c("d", "dir", "files", "i", "j", "year", "year_data", "years_data", "val"))
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(e1071)
crabs = MASS::crabs
set.seed(6789)
train.bm = sample(50, 40)
train.fm = sample(50, 40) + 50
train.om = sample(50, 40) + 100
train.of = sample(50, 40) + 150
train = c(train.bm, train.fm, train.om, train.of)
test = seq(200)[-train]
crabs = crabs[,-c(2,3)]
costs = 10^seq(-4,2)
tune.out = tune(svm, sp ~ ., data = crabs, kernel = "linear", ranges = list(cost = costs))
train_errors = list()
test_errors = list()
for (i in costs){
svmfit = svm(
sp ~ .,
data = crabs[train,],
kernel = "linear",
scale = FALSE,
cost = i
)
svm.predict = predict(svmfit, crabs)
train_errors = append(train_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[train]))
test_errors = append(test_errors, mean(ifelse(svm.predict != crabs$sp, 1, 0)[test]))
}
plot(costs, train_errors, log = "x", xlab = "Cost", ylab="Error", main="Errors")
lines(costs, train_errors, col="blue")
lines(costs, test_errors, col="red")
lines(costs, tune.out$performances$error, col="green")
legend("topright", legend=c("Test Error", "Train Error", "CV Error"), lty=1, col=c("red","blue", "green"))
plot(crabs$FL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$CL, crabs$CW, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
plot(crabs$RW, crabs$BD, col = crabs$sp)
legend("topleft", legend=c("Species B", "Species O"), pch=c(1), col=c("black", "red"))
rm("svm")
rm("svm")
head(svmfit)
tune.out
tune.out$performances
tune.out$performances$error
